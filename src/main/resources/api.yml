openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
paths:
  /example:
    get:
      tags:
        - Example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OkayResponse"
          description: OK
  /users/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      operationId: getUserById
      description: Returns a single user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to retrieve
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponseData'
        '400':
          description: Invalid ID supplied
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: 500 Internal Server Error
    put:
      summary: Update an existing user
      tags:
        - Users
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to update
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserRequest'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: 500 Internal Server Error
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to delete
      responses:
        '204':
          description: User deleted successfully
        '403':
          description: Forbidden
        '404':
          description: User not found
        '500':
          description: 500 Internal Server Error
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      operationId: getAllUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUserResponseData'
        '403':
          description: Forbidden
        '500':
          description: 500 Internal Server Error
    post:
      summary: Create a new user
      tags:
        - Users
      operationId: createUser
      requestBody:
        description: User object that needs to be added to the database
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserRequest'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    OkayResponse:
      properties:
        response:
          type: string
    GetUserResponseData:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        userName:
          type: string
          example: johndoe
    SaveUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - userName
      properties:
        firstName:
          type: string
          example: John
          maxLength: 255
        lastName:
          type: string
          example: Doe
          maxLength: 255
        userName:
          type: string
          example: johndoe
          maxLength: 255
        password:
          type: string
          example: password123
          maxLength: 255
security:
  - basicAuth: []  # <-- use the same name here